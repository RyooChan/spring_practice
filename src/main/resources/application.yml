spring:
#  datasource:
#    driver-class-name: org.mariadb.jdbc.Driver
#    url: jdbc:mariadb://localhost:9355/mydb
#    username: myadmin
#    password: chopin9355#
#
#  jpa:
#    hibernate:
#      ddl-auto: update
#    properties:
#      hibernate:
#        format_sql: true #To beautify or pretty print the SQL
#        show_sql: true #show sql
  h2:
    console:
      enabled: true
      path: /h2-console
  datasource:
    url: jdbc:h2:~/test;
    driverClassName: org.h2.Driver
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop  # 필요할 때 DB생성 및 제거
    defer-datasource-initialization: true # data.sql 사용시 타이밍 맞추기~
  mail:
    host: smtp.gmail.com
    port: 587
    username: fbcks97@kpu.ac.kr
    password: tlth1004!@
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  mvc:
    hiddenmethod:
      filter:
        enabled: true  # delete, put 등의 메소드를 사용하려면 해당 코드가 필요하다. 이를 하지 않으면 405에러 발생~
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 20MB
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 724680553933-slf7q33bdl9764m4nebcvqkbri5r7vqq.apps.googleusercontent.com
            client-secret: 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
            scope: profile, email
          naver:
            client-id: hESHo8AG5Pr8ObFcxmcl
            client-secret: uK1nxokmuY
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}" # (== http://localhost:8080/login/oauth2/code/naver)
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver
        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
  profiles:
    include: oauth
logging:
  level:
    org.hibernate:
      type.descriptor.sql: trace #show parameter binding
      SQL: DEBUG
